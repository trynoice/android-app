plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'org.jetbrains.kotlin.kapt'

  id 'androidx.navigation.safeargs.kotlin'
  id 'com.google.dagger.hilt.android'
  id 'com.mikepenz.aboutlibraries.plugin'

  id 'com.google.gms.google-services' // sed:free-build:remove
  id 'com.google.firebase.crashlytics' // sed:free-build:remove

  id 'com.adarshr.test-logger'
  id 'jacoco'
}

android {
  defaultConfig {
    namespace 'com.github.ashutoshgngwr.noice'
    applicationId 'com.github.ashutoshgngwr.noice'
    versionCode 60
    versionName '2.2.4'
    testInstrumentationRunner 'com.github.ashutoshgngwr.noice.InstrumentedTestRunner'
    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
  }

  signingConfigs {
    release {
      storeFile file('../keystore.jks')
      keyAlias "$System.env.KEY_ALIAS"
      storePassword "$System.env.STORE_PASSWORD"
      keyPassword "$System.env.KEY_PASSWORD"
    }
  }

  buildFeatures {
    viewBinding true
    dataBinding true
  }

  buildTypes {
    debug {
      testCoverageEnabled true
    }

    release {
      shrinkResources true
      minifyEnabled true
      signingConfig = signingConfigs.release // sed:free-build:remove
    }
  }

  flavorDimensions 'tier'
  productFlavors {
    free {
      dimension 'tier'
      buildConfigField 'boolean', 'IS_FREE_BUILD', 'true'
    }

    full {
      dimension 'tier'
      buildConfigField 'boolean', 'IS_FREE_BUILD', 'false'
    }
  }

  kapt {
    arguments {
      arg("room.schemaLocation", "$projectDir/build/generated/schemas")
    }
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
      all {
        testlogger.theme 'mocha'
        jacoco {
          includeNoLocationClasses = true
          excludes = ['jdk.internal.*']
        }
      }
    }
  }

  packagingOptions {
    // https://github.com/Kotlin/kotlinx.coroutines#avoiding-including-the-debug-infrastructure-in-the-resulting-apk
    resources.excludes += "DebugProbesKt.bin"
  }
}

project.afterEvaluate {
  android.applicationVariants.all { variant ->
    def taskName = "test${variant.name.capitalize()}Coverage"
    def testTask = "test${variant.name.capitalize()}UnitTest"
    def srcDirs = ["src/main/java"]
    if (variant.buildType != null) {
      srcDirs += "src/${variant.buildType.name}/java" // e.g. debug
    }

    if (variant.flavorName != null) {
      srcDirs += "src/${variant.flavorName}/java" // e.g. free
    }

    if (variant.buildType != null && variant.flavorName != null) {
      srcDirs += "src/${variant.name}/java" // e.g. freeDebug
    }

    def classFiles = fileTree(
      dir: "${project.buildDir}/tmp/kotlin-classes/${variant.name}",
      excludes: ['**/R.class',
                 '**/R$*.class',
                 '**/*$ViewInjector*.*',
                 '**/*$ViewBinder*.*',
                 '**/BuildConfig.*',
                 '**/Manifest*.*']
    )

    def execFile = fileTree(project.buildDir).matching {
      include "**/*/${testTask}.exec"
    }

    tasks.create(name: taskName, type: JacocoReport, dependsOn: testTask) {
      group = 'Reporting'
      description = "Generate Jacoco coverage reports for the ${variant.name} build variant."
      sourceDirectories.setFrom(files(srcDirs))
      classDirectories.setFrom(classFiles)
      executionData.setFrom(execFile)

      reports {
        xml.required = true
        html.required = true
      }
    }
  }

  tasks.create(name: 'testDebugCoverage', type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports for the all debug build variants.'

    android.applicationVariants
      .findAll { it.buildType.name == "debug" }
      .forEach { variant -> dependsOn "test${variant.name.capitalize()}Coverage" }
  }
}

dependencies {
  def androidXHiltVersion = '1.0.0'
  def exoPlayerVersion = '2.18.1'
  def fragmentVersion = '1.5.1'
  def roomVersion = '2.4.3'

  def espressoVersion = '3.4.0'
  def mockkVersion = '1.13.2'

  kapt "com.google.dagger:hilt-compiler:$deps.hiltVersion"
  kapt "androidx.hilt:hilt-compiler:$androidXHiltVersion"
  kapt "androidx.room:room-compiler:$roomVersion"

  implementation 'androidx.appcompat:appcompat:1.4.2'
  implementation 'androidx.browser:browser:1.4.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'androidx.core:core-ktx:1.8.0'
  implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
  implementation "androidx.hilt:hilt-work:$androidXHiltVersion"
  implementation "androidx.lifecycle:lifecycle-common-java8:$deps.lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$deps.lifecycleVersion"
  implementation 'androidx.media:media:1.6.0'
  implementation 'androidx.mediarouter:mediarouter:1.3.1'
  implementation "androidx.navigation:navigation-fragment-ktx:$deps.navVersion"
  implementation "androidx.navigation:navigation-ui-ktx:$deps.navVersion"
  implementation 'androidx.paging:paging-runtime-ktx:3.1.1'
  implementation 'androidx.preference:preference-ktx:1.2.0'
  implementation 'androidx.recyclerview:recyclerview:1.2.1'
  implementation "androidx.room:room-runtime:$roomVersion"
  implementation "androidx.room:room-ktx:$roomVersion"

  implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
  implementation 'androidx.work:work-runtime-ktx:2.7.1'
  implementation 'com.caverock:androidsvg-aar:1.4'
  implementation 'com.github.AppIntro:AppIntro:6.2.0'
  implementation "com.google.android.exoplayer:exoplayer-core:$exoPlayerVersion"
  implementation "com.google.android.exoplayer:extension-workmanager:$exoPlayerVersion"
  implementation 'com.google.android.flexbox:flexbox:3.0.0'
  implementation 'com.google.android.material:material:1.7.0'
  implementation 'com.google.code.gson:gson:2.10'
  implementation "com.google.dagger:hilt-android:$deps.hiltVersion"
  implementation "com.mikepenz:aboutlibraries:${deps.aboutLibrariesVersion}"
  implementation 'com.ncorti:slidetoact:0.10.0'
  implementation 'io.github.medyo:android-about-page:2.0.0'
  implementation 'io.noties.markwon:core:4.6.2'
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$deps.coroutinesVersion"

  implementation project(":api-client")

  fullImplementation 'com.android.billingclient:billing-ktx:5.0.0'
  fullImplementation 'com.google.android.gms:play-services-base:18.1.0'
  fullImplementation 'com.google.android.gms:play-services-cast-framework:21.0.1'
  fullImplementation 'com.google.android.play:core:1.10.3'
  fullImplementation platform('com.google.firebase:firebase-bom:29.1.0')
  fullImplementation 'com.google.firebase:firebase-analytics-ktx'
  fullImplementation 'com.google.firebase:firebase-crashlytics-ktx'


  kaptTest "com.google.dagger:hilt-android-compiler:$deps.hiltVersion"

  testImplementation "androidx.test:core:$deps.testCoreVersion"
  testImplementation "com.google.dagger:hilt-android-testing:$deps.hiltVersion"
  testImplementation "io.mockk:mockk:$mockkVersion"
  testImplementation "junit:junit:$deps.junitVersion"
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$deps.coroutinesVersion"
  testImplementation "org.robolectric:robolectric:$deps.robolectricVersion"
  testImplementation 'org.skyscreamer:jsonassert:1.5.1'


  kaptAndroidTest "com.google.dagger:hilt-android-compiler:$deps.hiltVersion"

  androidTestImplementation "androidx.test:core:$deps.testCoreVersion"
  androidTestImplementation "androidx.test:rules:1.4.0"
  androidTestImplementation "androidx.test:runner:1.4.0"
  androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
  androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
  androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
  androidTestImplementation 'androidx.test.ext:junit:1.1.3'
  androidTestImplementation "com.google.dagger:hilt-android-testing:$deps.hiltVersion"
  androidTestImplementation "io.mockk:mockk-android:$mockkVersion"
  androidTestImplementation "junit:junit:$deps.junitVersion"
}
